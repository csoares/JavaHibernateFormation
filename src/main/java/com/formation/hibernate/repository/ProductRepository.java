package com.formation.hibernate.repository;

import com.formation.hibernate.entity.Product;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;

/**
 * üéì PRODUCT REPOSITORY - Demonstra√ß√£o Avan√ßada de T√©cnicas de Reposit√≥rio
 * 
 * Esta interface demonstra t√©cnicas sofisticadas para gest√£o de produtos:
 * ‚úÖ Gest√£o cuidadosa de BLOBs (evitar carregamento desnecess√°rio)
 * ‚úÖ M√∫ltiplas estrat√©gias de consulta (JOIN FETCH, projec√ß√µes, etc.)
 * ‚úÖ Pagina√ß√£o eficiente para grandes volumes de dados
 * ‚úÖ Consultas agregadas para relat√≥rios e estat√≠sticas
 * ‚úÖ Query Methods para pesquisas comuns
 * ‚ùå Exemplos comentados de pr√°ticas perigosas com BLOBs
 */

@Repository
public interface ProductRepository extends JpaRepository<Product, Long> {

    // ‚úÖ BOA PR√ÅTICA: JOIN FETCH para carregar categoria junto
    // Evita lazy loading posterior quando aceder a product.getCategory()
    // Usa os √≠ndices idx_product_category para efici√™ncia
    @Query("SELECT p FROM Product p JOIN FETCH p.category WHERE p.id = :id")
    Optional<Product> findByIdWithCategory(@Param("id") Long id);

    // ‚úÖ BOA PR√ÅTICA: Consulta espec√≠fica SEM BLOBs
    // CR√çTICO: N√£o selecciona imageData (campo BLOB)
    // Ideal para listagens onde n√£o precisamos das imagens
    // Muito mais eficiente que carregar entidades completas
    @Query("SELECT p.id, p.name, p.description, p.price, p.stockQuantity FROM Product p WHERE p.category.name = :categoryName")
    List<Object[]> findProductsWithoutImageByCategory(@Param("categoryName") String categoryName);

    // ‚úÖ BOA PR√ÅTICA: Projec√ß√£o DTO com JOIN
    // Carrega dados de Product + Category numa √∫nica consulta
    // Ideal para listagens de produtos com nome da categoria
    @Query("SELECT new com.formation.hibernate.dto.ProductSummaryDto(p.id, p.name, p.price, c.name) " +
           "FROM Product p JOIN p.category c")
    List<com.formation.hibernate.dto.ProductSummaryDto> findAllProductSummaries();

    // ‚úÖ BOA PR√ÅTICA: Pagina√ß√£o com JOIN FETCH
    // Combina pagina√ß√£o eficiente com carregamento de relacionamentos
    // Essencial para grandes cat√°logos de produtos
    @Query("SELECT p FROM Product p JOIN FETCH p.category")
    Page<Product> findAllWithCategory(Pageable pageable);

    // ‚úÖ BOA PR√ÅTICA: Query Method para faixa de pre√ßos
    // Spring gera: WHERE price BETWEEN ? AND ?
    // Usa o √≠ndice idx_product_price para efici√™ncia
    List<Product> findByPriceBetween(BigDecimal minPrice, BigDecimal maxPrice);

    // ‚úÖ BOA PR√ÅTICA: Pesquisa textual com √≠ndice
    // ContainingIgnoreCase gera: WHERE LOWER(name) LIKE LOWER('%?%')
    // Usa o √≠ndice idx_product_name para boas performances
    List<Product> findByNameContainingIgnoreCase(String name);

    /*
     * üö® M√ÅS PR√ÅTICAS - EXEMPLOS PERIGOSOS COM BLOBs!
     */
    
    // ‚ùå M√Å PR√ÅTICA: Consulta que carrega entidades completas (incluindo BLOBs)
    // PROBLEMA: Carrega imageData (BLOB) para todos os produtos da categoria
    // RESULTADO: Se categoria tem 100 produtos, carrega 100 imagens (potencialmente 500MB+)
    // IMPACTO: OutOfMemoryError garantido + consultas gigantescas
    // @Query("SELECT p FROM Product p WHERE p.category.name = :categoryName")
    // List<Product> findProductsWithImageByCategory(@Param("categoryName") String categoryName);

    // ‚ùå M√Å PR√ÅTICA: findAll() sem pagina√ß√£o
    // PROBLEMA: Carrega TODOS os produtos + TODAS as imagens na mem√≥ria
    // RESULTADO: Crash da aplica√ß√£o com cat√°logos grandes
    // NUNCA usar: List<Product> findAll();

    /*
     * üéì CONSULTAS AGREGADAS E RELAT√ìRIOS
     */

    // ‚úÖ BOA PR√ÅTICA: Consulta agregada para estat√≠sticas de categoria
    // Calcula n√∫mero de produtos e pre√ßo m√©dio por categoria
    // GROUP BY necess√°rio para fun√ß√µes de agrega√ß√£o (COUNT, AVG)
    @Query("SELECT c.name, COUNT(p), AVG(p.price) FROM Product p JOIN p.category c GROUP BY c.id, c.name")
    List<Object[]> getProductStatisticsByCategory();

    /*
     * üéì M√âTODOS DE PAGINA√á√ÉO - Essenciais para Performance
     * Vers√µes paginadas dos m√©todos anteriores para grandes volumes
     */

    // ‚úÖ BOA PR√ÅTICA: Pesquisa textual com pagina√ß√£o
    // Combina pesquisa LIKE com pagina√ß√£o eficiente
    Page<Product> findByNameContainingIgnoreCase(String name, Pageable pageable);

    // ‚úÖ BOA PR√ÅTICA: Filtro por categoria com pagina√ß√£o
    // Usa √≠ndice idx_product_category + pagina√ß√£o
    Page<Product> findByCategoryId(Long categoryId, Pageable pageable);

    // ‚úÖ BOA PR√ÅTICA: Filtro por pre√ßo com pagina√ß√£o
    // Usa √≠ndice idx_product_price + pagina√ß√£o
    Page<Product> findByPriceBetween(BigDecimal minPrice, BigDecimal maxPrice, Pageable pageable);

    /*
     * üéì M√âTODOS ESPECIAIS PARA GEST√ÉO DE STOCK
     */

    // Query Method para produtos em falta
    // List<Product> findByStockQuantityLessThan(Integer minStock);

    // Query Method para produtos dispon√≠veis
    // List<Product> findByStockQuantityGreaterThan(Integer minStock);

    // Consulta para produtos mais vendidos
    // @Query("SELECT p, SUM(oi.quantity) as totalSold FROM Product p " +
    //        "JOIN p.orderItems oi GROUP BY p ORDER BY totalSold DESC")
    // List<Object[]> findBestSellingProducts();
}