package com.formation.hibernate.repository;

import com.formation.hibernate.entity.Order;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.EntityGraph;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * üéì ORDER REPOSITORY - Demonstra√ß√£o Completa de T√©cnicas Avan√ßadas
 * 
 * Esta interface demonstra as t√©cnicas mais sofisticadas de reposit√≥rio:
 * ‚úÖ EntityGraphs aninhados para relacionamentos complexos
 * ‚úÖ Gest√£o cuidadosa de BLOBs (evitar PDFs desnecess√°rios)
 * ‚úÖ Consultas agregadas para relat√≥rios financeiros
 * ‚úÖ M√∫ltiplas estrat√©gias de optimiza√ß√£o (JOIN FETCH, projec√ß√µes, etc.)
 * ‚úÖ Filtros com pagina√ß√£o para grandes volumes
 * ‚úÖ Consultas por intervalos de datas usando √≠ndices
 * ‚ùå Exemplos perigosos com BLOBs comentados
 */

@Repository
public interface OrderRepository extends JpaRepository<Order, Long> {

    /*
     * üéì T√âCNICAS DE ENTITYGRAPH - Resolu√ß√£o Sofisticada de N+1
     */

    // ‚úÖ BOA PR√ÅTICA: EntityGraph aninhado (subgraph)
    // Usa o NamedEntityGraph "Order.withUserAndDepartment" da entidade Order
    // Carrega Order ‚Üí User ‚Üí Department numa √∫nica consulta complexa
    // Evita 3 consultas separadas (1 order + 1 user + 1 department)
    @EntityGraph(value = "Order.withUserAndDepartment", type = EntityGraph.EntityGraphType.FETCH)
    @Query("SELECT o FROM Order o WHERE o.id = :id")
    Optional<Order> findByIdWithUserAndDepartment(@Param("id") Long id);

    // ‚úÖ BOA PR√ÅTICA: JOIN FETCH m√∫ltiplo expl√≠cito
    // Alternativa ao EntityGraph, mais expl√≠cita
    // Carrega Order + User + Department numa √∫nica consulta JPQL
    @Query("SELECT o FROM Order o " +
           "JOIN FETCH o.user u " +
           "JOIN FETCH u.department d " +
           "WHERE o.orderNumber = :orderNumber")
    Optional<Order> findByOrderNumberWithDetails(@Param("orderNumber") String orderNumber);

    /*
     * üéì PROJEC√á√ïES DTO - Efici√™ncia M√°xima
     */

    // ‚úÖ BOA PR√ÅTICA: Projec√ß√£o DTO para listagens
    // SELECT new ...Dto() cria DTOs directamente na consulta
    // N√£o carrega invoicePdf (BLOB) nem relacionamentos desnecess√°rios
    // ORDER BY otimizado usando √≠ndice idx_order_date
    @Query("SELECT new com.formation.hibernate.dto.OrderSummaryDto(o.id, o.orderNumber, o.orderDate, o.totalAmount, o.status) " +
           "FROM Order o WHERE o.user.id = :userId ORDER BY o.orderDate DESC")
    List<com.formation.hibernate.dto.OrderSummaryDto> findOrderSummariesByUserId(@Param("userId") Long userId);

    /*
     * üéì PAGINA√á√ÉO COM FILTROS
     */

    // ‚úÖ BOA PR√ÅTICA: Filtro por status + pagina√ß√£o + JOIN FETCH
    // Combina filtro eficiente (usa √≠ndice idx_order_status) com pagina√ß√£o
    // JOIN FETCH carrega user junto para evitar lazy loading posterior
    @Query("SELECT o FROM Order o JOIN FETCH o.user u WHERE o.status = :status")
    Page<Order> findByStatusWithUser(@Param("status") Order.OrderStatus status, Pageable pageable);

    /*
     * üéì CONSULTAS AGREGADAS - Relat√≥rios Financeiros
     */

    // ‚úÖ BOA PR√ÅTICA: Agrega√ß√£o complexa para relat√≥rios
    // SUM() para totais financeiros por departamento e per√≠odo
    // Usa m√∫ltiplos √≠ndices: idx_order_date + relacionamentos
    // Ideal para dashboards executivos
    @Query("SELECT SUM(o.totalAmount) FROM Order o WHERE o.user.department.id = :departmentId AND o.orderDate BETWEEN :startDate AND :endDate")
    BigDecimal getTotalAmountByDepartmentAndDateRange(
        @Param("departmentId") Long departmentId,
        @Param("startDate") LocalDateTime startDate,
        @Param("endDate") LocalDateTime endDate);

    /*
     * üéì GEST√ÉO ESTRAT√âGICA DE BLOBs
     */

    // ‚úÖ BOA PR√ÅTICA: Consulta SEM BLOBs
    // CR√çTICO: SELECT espec√≠fico exclui invoicePdf (campo BLOB)
    // Para listagens onde n√£o precisamos dos PDFs
    // Muito mais eficiente que carregar entidades completas
    @Query("SELECT o.id, o.orderNumber, o.orderDate, o.totalAmount, o.status FROM Order o WHERE o.totalAmount > :minAmount")
    List<Object[]> findOrdersWithoutBlobData(@Param("minAmount") BigDecimal minAmount);

    /*
     * üö® M√ÅS PR√ÅTICAS - EXEMPLOS PERIGOSOS COM BLOBs!
     */
    
    // ‚ùå M√Å PR√ÅTICA: Consulta que carrega entidades completas (incluindo PDFs)
    // PROBLEMA: Carrega invoicePdf (BLOB) para todos os pedidos que satisfazem crit√©rio
    // RESULTADO: Se h√° 1000 pedidos > valor, carrega 1000 PDFs (potencialmente GB!)
    // IMPACTO: OutOfMemoryError + timeouts + crash da aplica√ß√£o
    // @Query("SELECT o FROM Order o WHERE o.totalAmount > :minAmount")
    // List<Order> findOrdersWithBlobData(@Param("minAmount") BigDecimal minAmount);

    // ‚ùå M√Å PR√ÅTICA: findAll() em tabela com BLOBs
    // PROBLEMA: Carrega TODOS os pedidos + TODOS os PDFs
    // RESULTADO: Crash garantido da aplica√ß√£o
    // NUNCA usar: List<Order> findAll();

    /*
     * üéì CONSULTAS OPTIMIZADAS POR INTERVALOS DE TEMPO
     */

    // ‚úÖ BOA PR√ÅTICA: Consulta por intervalo de datas com √≠ndice
    // Usa o √≠ndice idx_order_date para efici√™ncia m√°xima
    // BETWEEN √© optimizado pela maioria das bases de dados
    // ORDER BY DESC aproveita o mesmo √≠ndice
    @Query("SELECT o FROM Order o WHERE o.orderDate BETWEEN :startDate AND :endDate ORDER BY o.orderDate DESC")
    List<Order> findOrdersByDateRange(@Param("startDate") LocalDateTime startDate, @Param("endDate") LocalDateTime endDate);

    /*
     * üéì RELAT√ìRIOS E ESTAT√çSTICAS
     */

    // ‚úÖ BOA PR√ÅTICA: Estat√≠sticas agregadas SEM carregar entidades
    // COUNT(o) e AVG(o.totalAmount) calculados na base de dados
    // GROUP BY status usa √≠ndice idx_order_status
    // Retorna apenas dados agregados, n√£o entidades completas
    @Query("SELECT o.status, COUNT(o), AVG(o.totalAmount) FROM Order o GROUP BY o.status")
    List<Object[]> getOrderStatistics();

    /*
     * üéì M√âTODOS DE PAGINA√á√ÉO - Performance Testing
     * Essenciais para validar performance com grandes volumes
     */

    // ‚úÖ BOA PR√ÅTICA: Filtro por utilizador com pagina√ß√£o
    // Usa √≠ndice idx_order_user + pagina√ß√£o eficiente
    Page<Order> findByUserId(Long userId, Pageable pageable);

    // ‚úÖ BOA PR√ÅTICA: Filtro por status com pagina√ß√£o
    // Usa √≠ndice idx_order_status + pagina√ß√£o eficiente
    Page<Order> findByStatus(String status, Pageable pageable);

    /*
     * üéì M√âTODOS ADICIONAIS √öTEIS (implementar conforme necess√°rio)
     */

    // Pedidos por departamento (√∫til para relat√≥rios departamentais)
    // @Query("SELECT o FROM Order o WHERE o.user.department.id = :departmentId")
    // Page<Order> findByUserDepartmentId(@Param("departmentId") Long departmentId, Pageable pageable);

    // Pedidos recentes (√∫ltimos 30 dias)
    // @Query("SELECT o FROM Order o WHERE o.orderDate >= :since ORDER BY o.orderDate DESC")
    // List<Order> findRecentOrders(@Param("since") LocalDateTime since);

    // Top clientes por valor total de pedidos
    // @Query("SELECT o.user, SUM(o.totalAmount) FROM Order o GROUP BY o.user ORDER BY SUM(o.totalAmount) DESC")
    // List<Object[]> findTopCustomersByTotalAmount();
}