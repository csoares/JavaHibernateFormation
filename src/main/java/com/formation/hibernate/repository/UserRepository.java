package com.formation.hibernate.repository;

import com.formation.hibernate.entity.User;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.EntityGraph;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

/**
 * üéì USER REPOSITORY - Demonstra√ß√£o Completa de Boas e M√°s Pr√°ticas
 * 
 * Esta interface demonstra todas as t√©cnicas essenciais de reposit√≥rio:
 * ‚úÖ EntityGraphs para resolu√ß√£o elegante de problemas N+1
 * ‚úÖ JOIN FETCH para optimiza√ß√£o expl√≠cita de consultas
 * ‚úÖ Projec√ß√µes DTO para m√°xima efici√™ncia de dados
 * ‚úÖ Pagina√ß√£o obrigat√≥ria para grandes volumes
 * ‚úÖ Consultas nativas quando JPQL n√£o √© suficiente
 * ‚úÖ Query Methods autom√°ticos para casos simples
 * ‚ùå Exemplos comentados de pr√°ticas perigosas
 */

// ‚úÖ BOA PR√ÅTICA: @Repository indica que esta interface √© um reposit√≥rio Spring
// Habilita tradu√ß√£o autom√°tica de exce√ß√µes JPA para DataAccessException
@Repository

// ‚úÖ BOA PR√ÅTICA: Herda de JpaRepository<Entity, ID>
// Fornece m√©todos CRUD prontos: save(), findById(), findAll(), delete(), etc.
// Generic: User = tipo da entidade, Long = tipo da chave prim√°ria
public interface UserRepository extends JpaRepository<User, Long> {

    /*
     * üéì M√âTODOS OTIMIZADOS - BOAS PR√ÅTICAS
     */

    // ‚úÖ BOA PR√ÅTICA: @EntityGraph resolve problema N+1
    // EntityGraphType.FETCH: carrega department junto com user numa √∫nica query
    // Usa o NamedEntityGraph "User.withDepartment" definido na entidade User
    // SEM isto: 2 queries (1 para user, 1 para department)
    // COM isto: 1 query com JOIN
    @EntityGraph(value = "User.withDepartment", type = EntityGraph.EntityGraphType.FETCH)
    @Query("SELECT u FROM User u WHERE u.id = :id")
    Optional<User> findByIdWithDepartment(@Param("id") Long id);

    // ‚úÖ BOA PR√ÅTICA: JOIN FETCH expl√≠cito na JPQL
    // Alternativa ao EntityGraph, mais expl√≠cita
    // Garante que department √© carregado numa √∫nica query
    @Query("SELECT u FROM User u JOIN FETCH u.department d WHERE u.email = :email")
    Optional<User> findByEmailWithDepartment(@Param("email") String email);

    // ‚úÖ BOA PR√ÅTICA: Proje√ß√£o DTO - M√ÅXIMA EFICI√äNCIA
    // Carrega APENAS os dados necess√°rios (n√£o entidades completas)
    // Mais r√°pido que carregar entidades quando s√≥ precisamos de alguns campos
    // LEFT JOIN: inclui users sem department (department pode ser null)
    @Query("SELECT new com.formation.hibernate.dto.UserSummaryDto(u.id, u.name, u.email, u.createdAt, d.name) " +
           "FROM User u LEFT JOIN u.department d")
    List<com.formation.hibernate.dto.UserSummaryDto> findAllUserSummaries();

    // ‚úÖ BOA PR√ÅTICA: Pagina√ß√£o + EntityGraph
    // SEMPRE usar pagina√ß√£o para grandes volumes de dados
    // EntityGraph garante que department vem junto, evitando N+1
    // Pageable controla page, size, sorting
    @EntityGraph(value = "User.withDepartment", type = EntityGraph.EntityGraphType.FETCH)
    Page<User> findAll(Pageable pageable);

    // ‚úÖ BOA PR√ÅTICA: Consulta customizada com JOIN FETCH
    // Para casos espec√≠ficos onde Query Method n√£o √© suficiente
    // JOIN FETCH garante que department vem na mesma query
    @Query("SELECT u FROM User u JOIN FETCH u.department d WHERE d.name = :departmentName")
    List<User> findByDepartmentNameOptimized(@Param("departmentName") String departmentName);

    /*
     * üö® M√ÅS PR√ÅTICAS - EXEMPLOS DO QUE N√ÉO FAZER!
     */

    // ‚ùå M√Å PR√ÅTICA: Query Method sem otimiza√ß√£o
    // PROBLEMA: Vai fazer findByDepartmentName(), depois para cada user vai buscar o department
    // RESULTADO: N+1 problem - se retornar 100 users, executa 101 queries!
    // SOLU√á√ÉO: Use findByDepartmentNameOptimized() acima
    // List<User> findByDepartmentName(String departmentName);

    // ‚ùå M√Å PR√ÅTICA: Carregar todos os dados sem pagina√ß√£o
    // PROBLEMA: Com milhares de users, vai carregar TUDO na mem√≥ria
    // RESULTADO: OutOfMemoryError + performance terr√≠vel + timeout
    // SOLU√á√ÉO: SEMPRE use Page<User> findAll(Pageable)
    // @Query("SELECT u FROM User u")
    // List<User> findAllWithoutPagination();

    // ‚ùå M√Å PR√ÅTICA: Query sem √≠ndices
    // PROBLEMA: Se department.budget n√£o tiver √≠ndice, vai fazer table scan
    // RESULTADO: Performance degradada exponencialmente com dados
    // @Query("SELECT u FROM User u WHERE u.department.budget > :minBudget")
    // List<User> findUsersWithBudgetAboveSlowVersion(@Param("minBudget") Double minBudget);

    /*
     * üéì T√âCNICAS AVAN√áADAS
     */

    // ‚úÖ BOA PR√ÅTICA: Query nativa quando JPQL n√£o √© suficiente
    // nativeQuery = true: usa SQL direto da base de dados
    // √ötil para queries complexas ou otimiza√ß√µes espec√≠ficas do BD
    // INNER JOIN: mais eficiente que LEFT JOIN quando sabemos que relation existe
    @Query(value = "SELECT u.* FROM users u INNER JOIN departments d ON u.department_id = d.id WHERE d.budget > :minBudget",
           nativeQuery = true)
    List<User> findUsersInDepartmentsWithBudgetAbove(@Param("minBudget") Double minBudget);

    // ‚úÖ BOA PR√ÅTICA: COUNT eficiente
    // S√≥ conta registros, n√£o carrega dados na mem√≥ria
    // Muito mais r√°pido que fazer findAll().size()
    @Query("SELECT COUNT(u) FROM User u WHERE u.department.id = :departmentId")
    Long countByDepartmentId(@Param("departmentId") Long departmentId);

    /*
     * üéì QUERY METHODS - Spring Data JPA autom√°tico
     * Spring gera implementa√ß√£o automaticamente baseado no nome do m√©todo
     */

    // ‚úÖ BOA PR√ÅTICA: Query Method com pagina√ß√£o
    // ContainingIgnoreCase = LIKE '%name%' case-insensitive
    // Spring gera automaticamente: WHERE LOWER(u.name) LIKE LOWER('%?%')
    Page<User> findByNameContainingIgnoreCase(String name, Pageable pageable);

    // ‚úÖ BOA PR√ÅTICA: Query Method simples com pagina√ß√£o
    // Spring gera automaticamente: WHERE u.department.id = ?
    // Usa o √≠ndice idx_user_department definido na entidade
    Page<User> findByDepartmentId(Long departmentId, Pageable pageable);

    /*
     * üéì M√âTODOS ESPEC√çFICOS PARA DEMONSTRA√á√ÉO DO PROBLEMA N+1
     */

    // ‚úÖ BOA PR√ÅTICA: JOIN FETCH expl√≠cito para resolver N+1
    // Alternativa ao EntityGraph usando JPQL directo
    // Carrega User + Department numa √∫nica query
    @Query("SELECT u FROM User u JOIN FETCH u.department d WHERE u.id = :id")
    Optional<User> findByIdWithDepartmentJoinFetch(@Param("id") Long id);

    // ‚úÖ BOA PR√ÅTICA: EntityGraph para carregar todos os users com departments
    // Resolve problema N+1 em opera√ß√µes de listagem
    // Sem isto: 1 query para users + N queries para departments
    // Com isto: 1 query apenas com JOIN
    @EntityGraph(value = "User.withDepartment", type = EntityGraph.EntityGraphType.FETCH)
    @Query("SELECT u FROM User u")
    List<User> findAllWithDepartment();
}