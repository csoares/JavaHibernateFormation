package com.formation.hibernate.repository;

import com.formation.hibernate.entity.Department;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

/**
 * üéì DEPARTMENT REPOSITORY - Demonstra√ß√£o de Padr√µes de Reposit√≥rio
 * 
 * Esta interface demonstra v√°rias t√©cnicas de reposit√≥rio Spring Data JPA:
 * ‚úÖ Query Methods autom√°ticos baseados no nome do m√©todo
 * ‚úÖ Consultas JPQL customizadas com @Query
 * ‚úÖ JOIN FETCH para resolver problemas N+1
 * ‚úÖ Projec√ß√µes DTO para efici√™ncia m√°xima
 * ‚úÖ Consultas agregadas com GROUP BY
 * ‚úÖ Uso apropriado de @Repository e gen√©ricos
 */

// ‚úÖ BOA PR√ÅTICA: @Repository marca interface como reposit√≥rio Spring
// Habilita tradu√ß√£o autom√°tica de excep√ß√µes JPA para DataAccessException
@Repository

// ‚úÖ BOA PR√ÅTICA: Extends JpaRepository<Entidade, TipoID>
// Fornece m√©todos CRUD prontos: save(), findById(), findAll(), delete(), etc.
// Gen√©ricos: Department = tipo da entidade, Long = tipo da chave prim√°ria
public interface DepartmentRepository extends JpaRepository<Department, Long> {

    // ‚úÖ BOA PR√ÅTICA: Query Method autom√°tico
    // Spring gera automaticamente: SELECT * FROM departments WHERE name = ?
    // Usa o √≠ndice idx_dept_name definido na entidade Department
    Optional<Department> findByName(String name);

    // ‚úÖ BOA PR√ÅTICA: Consulta JPQL customizada com JOIN FETCH
    // Carrega Department + todos os seus Users numa √∫nica consulta
    // Evita problema N+1: sem isto seriam 1 consulta para dept + N para users
    @Query("SELECT d FROM Department d JOIN FETCH d.users WHERE d.id = :id")
    Optional<Department> findByIdWithUsers(@Param("id") Long id);

    // ‚úÖ BOA PR√ÅTICA: Projec√ß√£o DTO - M√ÅXIMA EFICI√äNCIA
    // SELECT new ...Dto() cria DTOs directamente na consulta
    // Mais eficiente que carregar entidades completas e depois converter
    // S√≥ carrega os campos necess√°rios
    @Query("SELECT new com.formation.hibernate.dto.DepartmentDto(d.id, d.name, d.description, d.budget) " +
           "FROM Department d")
    List<com.formation.hibernate.dto.DepartmentDto> findAllDepartmentSummaries();

    // ‚úÖ BOA PR√ÅTICA: Consulta agregada para relat√≥rios
    // LEFT JOIN garante que departamentos sem utilizadores aparecem (com COUNT = 0)
    // GROUP BY necess√°rio quando usamos fun√ß√µes de agrega√ß√£o como COUNT
    @Query("SELECT d.name, COUNT(u) FROM Department d LEFT JOIN d.users u GROUP BY d.id, d.name")
    List<Object[]> getDepartmentUserCounts();

    // ‚úÖ BOA PR√ÅTICA: Query Method com condi√ß√£o comparativa
    // Spring gera: SELECT * FROM departments WHERE budget > ?
    // GreaterThan, LessThan, Between, etc. s√£o palavras-chave reconhecidas
    List<Department> findByBudgetGreaterThan(Double budget);
}