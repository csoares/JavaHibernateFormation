package com.formation.hibernate.repository;

import com.formation.hibernate.entity.OrderItem;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;

/**
 * üéì ORDER ITEM REPOSITORY - Demonstra√ß√£o de Entidades de Liga√ß√£o
 * 
 * Esta interface demonstra t√©cnicas para entidades de liga√ß√£o complexas:
 * ‚úÖ Query Methods para relacionamentos @ManyToOne optimizados
 * ‚úÖ JOIN FETCH m√∫ltiplo para carregar v√°rias rela√ß√µes numa consulta
 * ‚úÖ Consultas de contagem eficientes sem carregar dados
 * ‚úÖ Optimiza√ß√µes espec√≠ficas para entidades de liga√ß√£o (junction entities)
 * ‚úÖ Consultas agregadas para relat√≥rios de vendas
 * ‚úÖ M√©todos para an√°lise de comportamento de compra
 */

@Repository
public interface OrderItemRepository extends JpaRepository<OrderItem, Long> {

    // ‚úÖ BOA PR√ÅTICA: Query Method simples e eficiente
    // Spring gera automaticamente: WHERE oi.order.id = ?
    // Usa o √≠ndice idx_orderitem_order definido na entidade OrderItem
    List<OrderItem> findByOrderId(Long orderId);

    // ‚úÖ BOA PR√ÅTICA: JOIN FETCH m√∫ltiplo para carregar rela√ß√µes
    // Carrega OrderItem + Product + Order numa √∫nica query
    // Evita N+1: sem isto seriam 1 + N queries para products + M queries para orders
    // IMPORTANTE: Na pr√°tica, order j√° seria conhecido, mas este exemplo mostra a t√©cnica
    @Query("SELECT oi FROM OrderItem oi " +
           "JOIN FETCH oi.product p " +
           "JOIN FETCH oi.order o " +
           "WHERE o.id = :orderId")
    List<OrderItem> findByOrderIdWithProduct(@Param("orderId") Long orderId);

    // ‚úÖ BOA PR√ÅTICA: COUNT sem carregar entidades
    // Muito mais eficiente que findByOrderId().size()
    // Executa SELECT COUNT(*) em vez de carregar todos os dados
    long countByOrderId(Long orderId);

    // ‚úÖ BOA PR√ÅTICA: Query Method para rela√ß√£o @ManyToOne
    // √ötil para analytics: "quantos pedidos incluem este produto?"
    // Spring gera: WHERE oi.product.id = ?
    List<OrderItem> findByProductId(Long productId);

    /*
     * üéì M√âTODOS ADICIONAIS PARA DEMONSTRA√á√ÉO
     */

    // ‚úÖ BOA PR√ÅTICA: Query com m√∫ltiplas condi√ß√µes
    // Demonstra como combinar condi√ß√µes em Query Methods
    List<OrderItem> findByOrderIdAndProductId(Long orderId, Long productId);

    // ‚úÖ BOA PR√ÅTICA: Proje√ß√£o de valores calculados
    // Soma total de um pedido baseado nos itens (alternativa ao campo calculado)
    @Query("SELECT SUM(oi.totalPrice) FROM OrderItem oi WHERE oi.order.id = :orderId")
    Double calculateOrderTotal(@Param("orderId") Long orderId);

    // ‚úÖ BOA PR√ÅTICA: Query para relat√≥rios
    // TOP N produtos mais vendidos por quantidade
    @Query("SELECT oi.product.id, oi.product.name, SUM(oi.quantity) as totalSold " +
           "FROM OrderItem oi " +
           "GROUP BY oi.product.id, oi.product.name " +
           "ORDER BY totalSold DESC")
    List<Object[]> findTopSellingProducts();

    /*
     * üö® M√ÅS PR√ÅTICAS - O QUE N√ÉO FAZER
     */

    // ‚ùå M√Å PR√ÅTICA: Buscar sem otimiza√ß√£o de rela√ß√µes
    // PROBLEMA: Vai gerar N+1 se depois acessarmos oi.product ou oi.order
    // SOLU√á√ÉO: Use findByOrderIdWithProduct() que carrega tudo junto
    // List<OrderItem> findByOrderIdBadVersion(Long orderId);

    // ‚ùå M√Å PR√ÅTICA: Usar findAll().size() em vez de count()
    // PROBLEMA: Carrega todas as entidades na mem√≥ria s√≥ para contar
    // RESULTADO: Waste de mem√≥ria e performance terr√≠vel
    // long countBadVersion(); // implementa√ß√£o: return findAll().size();
}