package com.formation.hibernate.entity;

import jakarta.persistence.*;
import org.hibernate.annotations.BatchSize;

import java.math.BigDecimal;
import java.util.List;

/**
 * üéì ENTIDADE PRODUCT - Demonstra√ß√£o Avan√ßada de Mapeamento JPA
 * 
 * Esta entidade representa um produto e demonstra:
 * ‚úÖ M√∫ltiplos √≠ndices estrat√©gicos para diferentes tipos de consulta
 * ‚úÖ Gest√£o eficiente de BLOBs (dados de imagem)
 * ‚úÖ Uso correcto de BigDecimal para valores monet√°rios
 * ‚úÖ Relacionamentos bidirecionais optimizados
 * ‚úÖ Mapeamento de campos com nomes personalizados
 * ‚ùå Exemplos de configura√ß√µes perigosas para performance
 */

// ‚úÖ BOA PR√ÅTICA: Entidade com configura√ß√£o robusta de √≠ndices
@Entity

// ‚úÖ BOA PR√ÅTICA: M√∫ltiplos √≠ndices baseados em padr√µes de consulta real
// Produtos s√£o pesquisados por nome, categoria e pre√ßo frequentemente
@Table(name = "products", indexes = {
    // √çndice para pesquisas por nome ("iPhone", "Samsung Galaxy", etc.)
    @Index(name = "idx_product_name", columnList = "name"),
    // √çndice na foreign key para JOINs eficientes com Category
    @Index(name = "idx_product_category", columnList = "category_id"),
    // √çndice para consultas por faixa de pre√ßo (produtos at√© ‚Ç¨100, etc.)
    @Index(name = "idx_product_price", columnList = "price")
})
public class Product {

    // ‚úÖ BOA PR√ÅTICA: Chave prim√°ria auto-gerada
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // ‚úÖ BOA PR√ÅTICA: Campo obrigat√≥rio com tamanho adequado
    // length = 200: suficiente para nomes de produtos detalhados
    @Column(nullable = false, length = 200)
    private String name;

    // ‚úÖ BOA PR√ÅTICA: Descri√ß√£o opcional mais extensa
    // length = 1000: permite descri√ß√µes detalhadas do produto
    @Column(length = 1000)
    private String description;

    // ‚úÖ BOA PR√ÅTICA: BigDecimal para valores monet√°rios
    // precision = 10: at√© ‚Ç¨99.999.999,99 (10 d√≠gitos totais)
    // scale = 2: duas casas decimais para c√™ntimos
    // NUNCA usar double/float para dinheiro! (problemas de precis√£o)
    @Column(nullable = false, precision = 10, scale = 2)
    private BigDecimal price;

    // ‚úÖ BOA PR√ÅTICA: Campo de stock com nome personalizado na BD
    // Java: stockQuantity (camelCase) ‚Üî BD: stock_quantity (snake_case)
    @Column(name = "stock_quantity")
    private Integer stockQuantity;

    // ‚úÖ BOA PR√ÅTICA: @ManyToOne com LAZY loading
    // Muitos produtos pertencem a uma categoria
    // LAZY: s√≥ carrega category quando explicitamente acedida
    // JoinColumn especifica o nome da coluna FK na tabela products
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "category_id")
    private Category category;

    // ‚úÖ BOA PR√ÅTICA: @OneToMany optimizado para relacionamento inverso
    // Um produto pode estar em muitos itens de pedido
    // mappedBy = "product": OrderItem tem a foreign key
    // @BatchSize evita problema N+1 quando aceder aos order items
    @OneToMany(mappedBy = "product", fetch = FetchType.LAZY)
    @BatchSize(size = 25)
    private List<OrderItem> orderItems;

    // ‚úÖ BOA PR√ÅTICA: BLOB com LAZY loading - CR√çTICO para performance!
    // @Lob: indica dados grandes (imagem pode ter v√°rios MB)
    // @Basic(fetch = LAZY): ESSENCIAL - s√≥ carrega quando explicitamente acedida
    // SEM LAZY: todas as imagens seriam carregadas sempre (OutOfMemoryError!)
    @Lob
    @Basic(fetch = FetchType.LAZY)
    @Column(name = "image_data")
    private byte[] imageData;

    /*
     * üö® M√ÅS PR√ÅTICAS - EXEMPLOS PERIGOSOS PARA PERFORMANCE!
     */
    
    // ‚ùå M√Å PR√ÅTICA: @Lob sem FetchType.LAZY
    // PROBLEMA: Carrega TODAS as imagens sempre que carregar produtos
    // IMPACTO: Se listar 100 produtos, carrega 100 imagens (talvez 500MB+)
    // RESULTADO: OutOfMemoryError garantido + consultas gigantescas
    // @Lob
    // @Column(name = "image_data")
    // private byte[] imageData; // SEM @Basic(fetch = LAZY)

    // ‚ùå M√Å PR√ÅTICA: FetchType.EAGER em @ManyToOne
    // PROBLEMA: Sempre carrega category mesmo quando desnecess√°rio
    // RESULTADO: JOINs desnecess√°rios + mais dados na mem√≥ria
    // @ManyToOne(fetch = FetchType.EAGER)
    // @JoinColumn(name = "category_id")
    // private Category category;

    // ‚ùå M√Å PR√ÅTICA: double/float para pre√ßos
    // PROBLEMA: Erros de precis√£o em c√°lculos monet√°rios
    // EXEMPLO: 0.1 + 0.2 ‚â† 0.3 em floating point!
    // RESULTADO: C√°lculos incorrectos em faturas e pagamentos
    // @Column(nullable = false)
    // private double price; // NUNCA fazer isto para dinheiro!

    // ‚ùå M√Å PR√ÅTICA: Sem √≠ndices em campos pesquisados
    // PROBLEMA: Consultas por pre√ßo fazem table scan completo
    // RESULTADO: Performance degrada exponencialmente com dados

    // ‚úÖ BOA PR√ÅTICA: Construtor padr√£o obrigat√≥rio para JPA
    public Product() {}

    // ‚úÖ BOA PR√ÅTICA: Construtor funcional para cria√ß√£o de produtos
    // Inclui todos os campos essenciais excepto ID (auto-gerado) e imageData (opcional)
    public Product(String name, String description, BigDecimal price, Integer stockQuantity, Category category) {
        this.name = name;
        this.description = description;
        this.price = price;
        this.stockQuantity = stockQuantity;
        this.category = category;
    }

    /*
     * üéì GETTERS E SETTERS - Aten√ß√£o Especial aos BLOBs
     */

    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }

    public BigDecimal getPrice() { return price; }
    public void setPrice(BigDecimal price) { this.price = price; }

    public Integer getStockQuantity() { return stockQuantity; }
    public void setStockQuantity(Integer stockQuantity) { this.stockQuantity = stockQuantity; }

    // ‚ö†Ô∏è ATEN√á√ÉO: Pode disparar consulta se category n√£o estiver carregada
    // Use JOIN FETCH ou EntityGraph quando precisar da categoria
    public Category getCategory() { return category; }
    public void setCategory(Category category) { this.category = category; }

    // ‚ö†Ô∏è ATEN√á√ÉO: Pode disparar consulta se orderItems n√£o estiverem carregados
    // @BatchSize(25) torna isto mais eficiente
    public List<OrderItem> getOrderItems() { return orderItems; }
    public void setOrderItems(List<OrderItem> orderItems) { this.orderItems = orderItems; }

    // üö® PERIGO: Este getter SEMPRE dispara consulta para carregar a imagem!
    // S√ì chame quando realmente precisar da imagem (mostrar, download, etc.)
    // Para listar produtos SEM imagens, use consultas espec√≠ficas que excluam este campo
    public byte[] getImageData() { return imageData; }
    public void setImageData(byte[] imageData) { this.imageData = imageData; }
}