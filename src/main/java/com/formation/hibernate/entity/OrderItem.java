package com.formation.hibernate.entity;

import jakarta.persistence.*;

import java.math.BigDecimal;

/**
 * üéì ENTIDADE ORDER_ITEM - Demonstra√ß√£o de Entidade de Liga√ß√£o
 * 
 * Esta entidade representa um item dentro de um pedido e demonstra:
 * ‚úÖ Entidade de liga√ß√£o (junction entity) entre Order e Product
 * ‚úÖ Campos adicionais al√©m das foreign keys (quantity, prices)
 * ‚úÖ √çndices estrat√©gicos para consultas de relacionamento
 * ‚úÖ C√°lculos autom√°ticos de pre√ßos totais
 * ‚úÖ Relacionamentos @ManyToOne optimizados
 * ‚ùå Exemplos de configura√ß√µes problem√°ticas
 */

// ‚úÖ BOA PR√ÅTICA: Entidade de liga√ß√£o bem estruturada
@Entity

// ‚úÖ BOA PR√ÅTICA: √çndices essenciais para foreign keys
// order_items s√£o frequentemente consultados por pedido ou por produto
@Table(name = "order_items", indexes = {
    // √çndice para consultas "todos os itens do pedido X"
    @Index(name = "idx_orderitem_order", columnList = "order_id"),
    // √çndice para consultas "em que pedidos aparece o produto Y"
    @Index(name = "idx_orderitem_product", columnList = "product_id")
})
public class OrderItem {

    // ‚úÖ BOA PR√ÅTICA: Chave prim√°ria pr√≥pria
    // Mesmo sendo entidade de liga√ß√£o, tem identidade pr√≥pria
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // ‚úÖ BOA PR√ÅTICA: Campo obrigat√≥rio com valida√ß√£o
    // Quantidade deve ser sempre positiva (valida√ß√£o de neg√≥cio)
    @Column(nullable = false)
    private Integer quantity;

    // ‚úÖ BOA PR√ÅTICA: Pre√ßo unit√°rio no momento da compra
    // Importante: guarda o pre√ßo que estava em vigor quando o pedido foi feito
    // N√£o depende do pre√ßo actual do produto (que pode ter mudado)
    @Column(name = "unit_price", nullable = false, precision = 10, scale = 2)
    private BigDecimal unitPrice;

    // ‚úÖ BOA PR√ÅTICA: Campo calculado para total do item
    // total_price = quantity * unit_price
    // Facilita consultas e relat√≥rios
    @Column(name = "total_price", nullable = false, precision = 10, scale = 2)
    private BigDecimal totalPrice;

    // ‚úÖ BOA PR√ÅTICA: @ManyToOne LAZY para Order
    // Muitos itens pertencem a um pedido
    // nullable = false: item DEVE ter um pedido (integridade referencial)
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "order_id", nullable = false)
    private Order order;

    // ‚úÖ BOA PR√ÅTICA: @ManyToOne LAZY para Product
    // Muitos itens referenciam um produto
    // nullable = false: item DEVE referenciar um produto v√°lido
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "product_id", nullable = false)
    private Product product;

    /*
     * üö® M√ÅS PR√ÅTICAS - EXEMPLOS PROBLEM√ÅTICOS
     */
    
    // ‚ùå M√Å PR√ÅTICA: FetchType.EAGER em @ManyToOne
    // PROBLEMA: Sempre carrega order e product, mesmo quando desnecess√°rio
    // RESULTADO: JOINs complexos + mais dados na mem√≥ria
    // @ManyToOne(fetch = FetchType.EAGER)
    // @JoinColumn(name = "order_id", nullable = false)
    // private Order order;

    // ‚ùå M√Å PR√ÅTICA: N√£o usar BigDecimal para valores monet√°rios
    // PROBLEMA: Erros de precis√£o em c√°lculos financeiros
    // RESULTADO: Diferen√ßas em c√™ntimos que se acumulam
    // @Column(name = "unit_price", nullable = false)
    // private double unitPrice; // PERIGOSO para dinheiro!

    // ‚ùå M√Å PR√ÅTICA: Sem √≠ndices nas foreign keys
    // PROBLEMA: Consultas para itens de um pedido fazem table scan
    // RESULTADO: Performance terr√≠vel em pedidos com muitos itens

    // ‚úÖ BOA PR√ÅTICA: Construtor padr√£o para JPA
    public OrderItem() {}

    // ‚úÖ BOA PR√ÅTICA: Construtor com c√°lculo autom√°tico do total
    // Recebe dados essenciais e calcula automaticamente o pre√ßo total
    public OrderItem(Integer quantity, BigDecimal unitPrice, Order order, Product product) {
        this.quantity = quantity;
        this.unitPrice = unitPrice;
        // ‚úÖ C√°lculo autom√°tico: total = quantidade √ó pre√ßo unit√°rio
        this.totalPrice = unitPrice.multiply(BigDecimal.valueOf(quantity));
        this.order = order;
        this.product = product;
    }

    /*
     * üéì GETTERS E SETTERS - Com L√≥gica de Neg√≥cio
     */

    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    // ‚úÖ BOA PR√ÅTICA: Setter com rec√°lculo autom√°tico
    // Quando mudar quantidade, recalcula automaticamente o total
    public Integer getQuantity() { return quantity; }
    public void setQuantity(Integer quantity) {
        this.quantity = quantity;
        // Recalcula total se j√° temos pre√ßo unit√°rio
        if (this.unitPrice != null) {
            this.totalPrice = this.unitPrice.multiply(BigDecimal.valueOf(quantity));
        }
    }

    // ‚úÖ BOA PR√ÅTICA: Setter com rec√°lculo autom√°tico
    // Quando mudar pre√ßo unit√°rio, recalcula automaticamente o total
    public BigDecimal getUnitPrice() { return unitPrice; }
    public void setUnitPrice(BigDecimal unitPrice) {
        this.unitPrice = unitPrice;
        // Recalcula total se j√° temos quantidade
        if (this.quantity != null) {
            this.totalPrice = unitPrice.multiply(BigDecimal.valueOf(quantity));
        }
    }

    public BigDecimal getTotalPrice() { return totalPrice; }
    public void setTotalPrice(BigDecimal totalPrice) { this.totalPrice = totalPrice; }

    // ‚ö†Ô∏è ATEN√á√ÉO: Pode disparar consulta se order n√£o estiver carregado
    public Order getOrder() { return order; }
    public void setOrder(Order order) { this.order = order; }

    // ‚ö†Ô∏è ATEN√á√ÉO: Pode disparar consulta se product n√£o estiver carregado
    // Use JOIN FETCH quando precisar de aceder aos dados do produto
    public Product getProduct() { return product; }
    public void setProduct(Product product) { this.product = product; }
}