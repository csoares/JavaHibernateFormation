package com.formation.hibernate.entity;

import jakarta.persistence.*;
import org.hibernate.annotations.BatchSize;

import java.util.List;

/**
 * üéì ENTIDADE DEPARTMENT - Demonstra√ß√£o de Boas Pr√°ticas JPA/Hibernate
 * 
 * Esta entidade representa um departamento empresarial e demonstra:
 * ‚úÖ Configura√ß√£o correcta de √≠ndices para performance
 * ‚úÖ Gest√£o eficiente de relacionamentos bidirecionais
 * ‚úÖ Uso apropriado de @BatchSize para evitar problemas N+1
 * ‚úÖ Constraints de base de dados ao n√≠vel da aplica√ß√£o
 * ‚ùå Exemplos comentados de m√°s pr√°ticas para compara√ß√£o educativa
 */

// ‚úÖ BOA PR√ÅTICA: @Entity marca esta classe como uma entidade JPA
// O Hibernate ir√° mapear esta classe para uma tabela na base de dados
@Entity

// ‚úÖ BOA PR√ÅTICA: @Table permite especificar o nome da tabela e √≠ndices
// name = "departments": define explicitamente o nome da tabela
// indexes: define √≠ndices para melhorar performance das consultas
@Table(name = "departments", indexes = {
    // √çndice no campo 'name' - essencial para consultas por nome do departamento
    // Consultas tipo "WHERE name = ?" usar√£o este √≠ndice em vez de table scan
    @Index(name = "idx_dept_name", columnList = "name")
})
public class Department {

    // ‚úÖ BOA PR√ÅTICA: @Id marca este campo como chave prim√°ria
    @Id
    // ‚úÖ BOA PR√ÅTICA: IDENTITY usa auto-increment da base de dados
    // Mais eficiente que SEQUENCE para a maioria das bases de dados
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // ‚úÖ BOA PR√ÅTICA: Especificar constraints explicitamente
    // nullable = false: campo obrigat√≥rio (NOT NULL constraint)
    // unique = true: garante unicidade + cria √≠ndice autom√°tico
    // length = 100: limita tamanho (importante para performance)
    @Column(nullable = false, unique = true, length = 100)
    private String name;

    // ‚úÖ BOA PR√ÅTICA: Campos opcionais podem ter nullable = true (padr√£o)
    // length = 500: limita tamanho para descri√ß√µes mais longas
    @Column(length = 500)
    private String description;

    // ‚úÖ BOA PR√ÅTICA: Especificar nome da coluna quando diferente do campo
    // Mant√©m clareza entre Java (camelCase) e BD (snake_case)
    @Column(name = "budget")
    private Double budget;

    // ‚úÖ BOA PR√ÅTICA: @OneToMany com LAZY + @BatchSize para colec√ß√µes
    // mappedBy = "department": indica que User tem a foreign key, n√£o Department
    // FetchType.LAZY: s√≥ carrega users quando explicitamente acedidos
    // @BatchSize(25): quando carregar users, carrega 25 de cada vez (eficiente)
    @OneToMany(mappedBy = "department", fetch = FetchType.LAZY)
    @BatchSize(size = 25)
    private List<User> users;

    /*
     * üö® M√ÅS PR√ÅTICAS - EXEMPLOS DO QUE N√ÉO FAZER!
     * Estas configura√ß√µes est√£o comentadas para demonstrar problemas comuns
     */
    
    // ‚ùå M√Å PR√ÅTICA: FetchType.EAGER em colec√ß√µes (@OneToMany)
    // PROBLEMA: Carrega TODOS os users do departamento em cada consulta
    // RESULTADO: Performance terr√≠vel + poss√≠vel OutOfMemoryError com muitos users
    // IMPACTO: Se um departamento tem 1000 users, sempre carrega os 1000!
    // @OneToMany(mappedBy = "department", fetch = FetchType.EAGER)
    // private List<User> users;

    // ‚ùå M√Å PR√ÅTICA: @OneToMany sem @BatchSize
    // PROBLEMA: Problema N+1 - se carregar 100 departments, executa 101 consultas
    // RESULTADO: 1 consulta para departments + 100 consultas para users de cada um
    // @OneToMany(mappedBy = "department", fetch = FetchType.LAZY)
    // private List<User> users; // SEM @BatchSize

    // ‚ùå M√Å PR√ÅTICA: N√£o especificar tamanhos ou constraints
    // PROBLEMA: Base de dados pode usar tipos menos eficientes (TEXT vs VARCHAR)
    // RESULTADO: Performance degradada + maior uso de espa√ßo
    // @Column // SEM nullable, unique, length especificados
    // private String name;

    // ‚ùå M√Å PR√ÅTICA: N√£o criar √≠ndices em campos pesquisados
    // PROBLEMA: Consultas por nome fazem table scan completo
    // RESULTADO: Performance exponencialmente pior com o crescimento dos dados

    // ‚úÖ BOA PR√ÅTICA: Construtor padr√£o obrigat√≥rio para JPA
    // O JPA/Hibernate precisa deste construtor para criar inst√¢ncias via reflex√£o
    public Department() {}

    // ‚úÖ BOA PR√ÅTICA: Construtor de conveni√™ncia para cria√ß√£o de objectos
    // Facilita a cria√ß√£o de departamentos nos testes e popula√ß√£o de dados
    // N√£o inclui ID (ser√° gerado automaticamente) nem users (carregados quando necess√°rio)
    public Department(String name, String description, Double budget) {
        this.name = name;
        this.description = description;
        this.budget = budget;
    }

    /*
     * üéì GETTERS E SETTERS - Pr√°ticas Importantes
     * 
     * ‚úÖ Sempre p√∫blicos para JPA poder aceder
     * ‚úÖ Seguir conven√ß√£o JavaBean (getName, setName)
     * ‚ö†Ô∏è  CUIDADO: getter de 'users' pode disparar consulta se n√£o estiver carregado!
     */

    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getDescription() { return description; }
    public void setDescription(String description) { this.description = description; }

    public Double getBudget() { return budget; }
    public void setBudget(Double budget) { this.budget = budget; }

    // ‚ö†Ô∏è ATEN√á√ÉO: Este getter pode disparar uma consulta se users n√£o estiverem carregados!
    // Use consultas com JOIN FETCH ou EntityGraph quando precisar dos users
    // Com @BatchSize(25), ser√° mais eficiente, mas ainda assim √© uma consulta extra
    public List<User> getUsers() { return users; }
    public void setUsers(List<User> users) { this.users = users; }
}