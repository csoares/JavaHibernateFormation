package com.formation.hibernate.entity;

import jakarta.persistence.*;
import org.hibernate.annotations.BatchSize;

import java.time.LocalDateTime;
import java.util.List;

/**
 * üéì ENTIDADE USER - Demonstra√ß√£o de Boas e M√°s Pr√°ticas JPA/Hibernate
 * 
 * Esta entidade representa um utilizador do sistema e demonstra:
 * ‚úÖ T√©cnicas essenciais para performance √≥ptima
 * ‚úÖ Configura√ß√£o correcta de relacionamentos bidirecionais
 * ‚úÖ Uso estrat√©gico de √≠ndices para consultas frequentes
 * ‚úÖ EntityGraphs para resolver problemas N+1
 * ‚úÖ @BatchSize para optimiza√ß√£o de colec√ß√µes
 * ‚ùå Exemplos comentados de m√°s pr√°ticas comuns
 */

// ‚úÖ BOA PR√ÅTICA: @Entity marca a classe como uma entidade JPA
// O nome da tabela ser√° automaticamente "User" se n√£o especificado
@Entity

// ‚úÖ BOA PR√ÅTICA: @Table permite customizar nome da tabela e definir √≠ndices
// √çndices s√£o ESSENCIAIS para performance de consultas
@Table(name = "users", indexes = {
    // √çndice no email para buscas r√°pidas (email √© unique e frequentemente pesquisado)
    @Index(name = "idx_user_email", columnList = "email"),
    // √çndice na foreign key para JOINs eficientes
    @Index(name = "idx_user_department", columnList = "department_id")
})

// ‚úÖ BOA PR√ÅTICA: @NamedEntityGraph define quais relacionamentos carregar
// Resolve o problema N+1 de forma declarativa
// Este EntityGraph ser√° usado em consultas que precisam do departamento
@NamedEntityGraph(
    name = "User.withDepartment",
    attributeNodes = {
        @NamedAttributeNode("department")  // Carrega department junto com user
    }
)
public class User {

    // ‚úÖ BOA PR√ÅTICA: @Id marca o campo como chave prim√°ria
    @Id
    // ‚úÖ BOA PR√ÅTICA: IDENTITY √© eficiente para auto-incremento na maioria dos BDs
    // Alternativas: AUTO, SEQUENCE, TABLE (cada uma tem seu caso de uso)
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // ‚úÖ BOA PR√ÅTICA: @Column com constraints de valida√ß√£o ao n√≠vel da BD
    // nullable = false: NOT NULL constraint
    // length: limita o tamanho (importante para performance e storage)
    @Column(nullable = false, length = 100)
    private String name;

    // ‚úÖ BOA PR√ÅTICA: unique = true cria constraint UNIQUE + √≠ndice autom√°tico
    // Email √© naturalmente √∫nico e frequentemente pesquisado
    @Column(nullable = false, unique = true, length = 150)
    private String email;

    // ‚úÖ BOA PR√ÅTICA: name especifica o nome da coluna na BD (snake_case vs camelCase)
    // Valor padr√£o definido aqui evita problemas de NULL
    @Column(name = "created_at", nullable = false)
    private LocalDateTime createdAt = LocalDateTime.now();

    // ‚úÖ BOA PR√ÅTICA: @ManyToOne com FetchType.LAZY (padr√£o, mas expl√≠cito)
    // LAZY significa que department s√≥ √© carregado quando explicitamente acessado
    // Isto evita carregar dados desnecess√°rios
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "department_id")  // Nome da coluna FK na tabela users
    private Department department;

    // ‚úÖ BOA PR√ÅTICA: @OneToMany com LAZY + @BatchSize
    // mappedBy indica que Order tem a foreign key (n√£o User)
    // @BatchSize otimiza carregamento de cole√ß√µes (carrega 25 orders por vez)
    @OneToMany(mappedBy = "user", fetch = FetchType.LAZY)
    @BatchSize(size = 25)  // Hibernate carrega at√© 25 orders numa √∫nica query
    private List<Order> orders;

    /*
     * üö® M√ÅS PR√ÅTICAS - N√ÉO FAZER ISTO! 
     * Estas configura√ß√µes est√£o comentadas para demonstrar problemas comuns
     */
    
    // ‚ùå M√Å PR√ÅTICA: FetchType.EAGER em @ManyToOne
    // PROBLEMA: Sempre carrega department, mesmo quando n√£o necess√°rio
    // RESULTADO: Queries desnecess√°rias + mais dados na mem√≥ria + JOINs sempre executados
    // @ManyToOne(fetch = FetchType.EAGER)
    // @JoinColumn(name = "department_id")
    // private Department department;

    // ‚ùå M√Å PR√ÅTICA: FetchType.EAGER em cole√ß√µes (@OneToMany)
    // PROBLEMA: Carrega TODOS os orders do user em cada consulta
    // RESULTADO: OutOfMemoryError com muitos orders + queries gigantes + performance terr√≠vel
    // @OneToMany(mappedBy = "user", fetch = FetchType.EAGER)
    // private List<Order> orders;

    // ‚ùå M√Å PR√ÅTICA: @OneToMany sem @BatchSize
    // PROBLEMA: Problema N+1 - se carregar 100 users, executa 101 queries (1 + 100)
    // RESULTADO: Centenas de queries pequenas em vez de algumas queries eficientes
    // @OneToMany(mappedBy = "user", fetch = FetchType.LAZY)
    // private List<Order> orders;

    // ‚ùå M√Å PR√ÅTICA: Sem √≠ndices nas colunas pesquisadas
    // PROBLEMA: Consultas fazem table scan completo
    // RESULTADO: Performance degradada exponencialmente com o tamanho da tabela
    
    // ‚ùå M√Å PR√ÅTICA: N√£o especificar tamanhos de String
    // PROBLEMA: BD pode usar TEXT em vez de VARCHAR, menos eficiente
    // @Column(nullable = false)  // SEM length definido
    // private String name;

    // ‚úÖ BOA PR√ÅTICA: Construtor padr√£o obrigat√≥rio para JPA
    // JPA precisa deste construtor para criar inst√¢ncias via reflection
    public User() {}

    // ‚úÖ BOA PR√ÅTICA: Construtor de conveni√™ncia para cria√ß√£o de objetos
    // N√£o inclui ID (ser√° gerado pela BD) nem orders (ser√° carregado quando necess√°rio)
    public User(String name, String email, Department department) {
        this.name = name;
        this.email = email;
        this.department = department;
    }

    /*
     * üéì GETTERS E SETTERS - Pr√°ticas Importantes
     * 
     * ‚úÖ Sempre public para JPA
     * ‚úÖ Seguir conven√ß√£o JavaBean
     * ‚ö†Ô∏è  Cuidado: getters de relacionamentos LAZY podem disparar queries!
     */

    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public LocalDateTime getCreatedAt() { return createdAt; }
    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }

    // ‚ö†Ô∏è ATEN√á√ÉO: Este getter pode disparar uma query se department n√£o estiver carregado!
    // Use EntityGraph ou JOIN FETCH para carregar department quando necess√°rio
    public Department getDepartment() { return department; }
    public void setDepartment(Department department) { this.department = department; }

    // ‚ö†Ô∏è ATEN√á√ÉO: Este getter pode disparar uma query se orders n√£o estiver carregado!
    // Com @BatchSize, ser√° mais eficiente, mas ainda assim √© uma query extra
    public List<Order> getOrders() { return orders; }
    public void setOrders(List<Order> orders) { this.orders = orders; }
}