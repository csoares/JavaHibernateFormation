package com.formation.hibernate.controller.good;

import com.formation.hibernate.converter.UserConverter;
import com.formation.hibernate.dto.UserDto;
import com.formation.hibernate.dto.UserSummaryDto;
import com.formation.hibernate.entity.User;
import com.formation.hibernate.repository.UserRepository;
import com.formation.hibernate.util.PerformanceMonitor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

/**
 * üéì USER GOOD CONTROLLER - Demonstra√ß√£o de Excel√™ncia em REST/JPA
 * 
 * Este controlador exemplifica as melhores pr√°ticas da ind√∫stria:
 * ‚úÖ Transac√ß√µes read-only optimizadas para consultas
 * ‚úÖ Pagina√ß√£o obrigat√≥ria para escalabilidade
 * ‚úÖ EntityGraphs para resolu√ß√£o elegante de problemas N+1
 * ‚úÖ DTOs para isolamento da API e estrutura interna
 * ‚úÖ ResponseEntity para controlo completo das respostas HTTP
 * ‚úÖ Monitoriza√ß√£o integrada de performance e m√©tricas
 * ‚úÖ Logging estruturado para observabilidade
 * ‚úÖ Injec√ß√£o de depend√™ncias por construtor
 * ‚úÖ Tratamento adequado de erros e casos excepcionais
 */

// ‚úÖ BOA PR√ÅTICA: @RestController combina @Controller + @ResponseBody
// Automaticamente serializa retornos para JSON
@RestController

// ‚úÖ BOA PR√ÅTICA: @RequestMapping no n√≠vel da classe para prefixo comum
// Todos os m√©todos herdam este path base
@RequestMapping("/api/good/users")
public class UserGoodController {

    // ‚úÖ BOA PR√ÅTICA: Logger para debugging e monitoriza√ß√£o
    private static final Logger logger = LoggerFactory.getLogger(UserGoodController.class);

    /*
     * üéì DEPENDENCY INJECTION - Final fields para imutabilidade
     */
    private final UserRepository userRepository;
    private final UserConverter userConverter;
    private final PerformanceMonitor performanceMonitor;

    // ‚úÖ BOA PR√ÅTICA: Constructor injection (prefer√≠vel a @Autowired)
    public UserGoodController(UserRepository userRepository, UserConverter userConverter, PerformanceMonitor performanceMonitor) {
        this.userRepository = userRepository;
        this.userConverter = userConverter;
        this.performanceMonitor = performanceMonitor;
    }

    /*
     * üéì ENDPOINT GET BY ID - Demonstra√ß√£o de Otimiza√ß√µes
     */
    
    // ‚úÖ BOA PR√ÅTICA: @GetMapping com path variable
    // RESTful: GET /api/good/users/{id}
    @GetMapping("/{id}")
    
    // ‚úÖ BOA PR√ÅTICA: @Transactional(readOnly = true) para consultas
    // Otimiza√ß√£o: Hibernate n√£o faz dirty checking
    // Mais eficiente para opera√ß√µes de leitura
    @Transactional(readOnly = true)
    public ResponseEntity<UserDto> getUserById(@PathVariable Long id) {
        // ‚úÖ BOA PR√ÅTICA: ID √∫nico para rastreamento de performance
        String operationId = "getUserById-good-" + id;

        return performanceMonitor.measure(operationId,
            "Buscar usu√°rio por ID com EntityGraph (otimizado)",
            () -> {
                // ‚úÖ BOA PR√ÅTICA: M√©todo otimizado do repository
                // findByIdWithDepartment() usa EntityGraph para evitar N+1
                // SEM isto: 2 queries (1 user + 1 department)
                // COM isto: 1 query com JOIN
                Optional<User> user = userRepository.findByIdWithDepartment(id);

                if (user.isPresent()) {
                    // ‚úÖ BOA PR√ÅTICA: Converter entidade para DTO
                    // Separa estrutura interna da API p√∫blica
                    // Evita exposi√ß√£o de dados sens√≠veis/internos
                    UserDto dto = userConverter.toDto(user.get());
                    
                    // ‚úÖ BOA PR√ÅTICA: Log estruturado para debugging
                    logger.info("‚úÖ Usu√°rio encontrado: {} (Departamento: {})",
                        dto.getName(), dto.getDepartment() != null ? dto.getDepartment().getName() : "N/A");
                    
                    // ‚úÖ BOA PR√ÅTICA: ResponseEntity.ok() para HTTP 200
                    return ResponseEntity.ok(dto);
                } else {
                    // ‚úÖ BOA PR√ÅTICA: Log de casos especiais
                    logger.warn("‚ö†Ô∏è Usu√°rio n√£o encontrado: {}", id);
                    
                    // ‚úÖ BOA PR√ÅTICA: HTTP 404 para recurso n√£o encontrado
                    return ResponseEntity.notFound().build();
                }
            });
    }

    /*
     * üéì ENDPOINT GET ALL - Demonstra√ß√£o de Pagina√ß√£o
     */
    
    // ‚úÖ BOA PR√ÅTICA: @GetMapping sem path = endpoint base da classe
    // GET /api/good/users
    @GetMapping
    @Transactional(readOnly = true)
    public ResponseEntity<Page<UserDto>> getAllUsers(
            // ‚úÖ BOA PR√ÅTICA: @RequestParam com valores padr√£o
            // Par√¢metros opcionais com defaults sensatos
            @RequestParam(defaultValue = "0") int page,      // P√°gina 0 (primeira)
            @RequestParam(defaultValue = "20") int size,     // 20 itens por p√°gina
            @RequestParam(defaultValue = "id") String sortBy) { // Ordenar por ID

        String operationId = "getAllUsers-good-page-" + page;

        return performanceMonitor.measure(operationId,
            String.format("Buscar usu√°rios paginados (p√°gina %d, tamanho %d) com EntityGraph", page, size),
            () -> {
                // ‚úÖ BOA PR√ÅTICA: Pagina√ß√£o com Spring Data
                // PageRequest.of() cria objeto Pageable
                // Sort.by() adiciona ordena√ß√£o
                Pageable pageable = PageRequest.of(page, size, Sort.by(sortBy));
                
                // ‚úÖ BOA PR√ÅTICA: Repository com EntityGraph evita N+1
                // Cada user vem com department carregado
                Page<User> users = userRepository.findAll(pageable);

                // ‚úÖ BOA PR√ÅTICA: Page.map() converte Page<Entity> para Page<DTO>
                // Mant√©m metadados de pagina√ß√£o (totalElements, totalPages, etc.)
                // Method reference (::) mais limpo que lambda
                Page<UserDto> userDtos = users.map(userConverter::toDto);

                // ‚úÖ BOA PR√ÅTICA: Log de m√©tricas para monitoriza√ß√£o
                logger.info("‚úÖ P√°gina {} de usu√°rios carregada: {} elementos de {} total",
                    page, userDtos.getNumberOfElements(), userDtos.getTotalElements());

                // ‚úÖ BOA PR√ÅTICA: Retorna Page<DTO> com metadados
                // Cliente recebe: content, totalElements, totalPages, size, number, etc.
                return ResponseEntity.ok(userDtos);
            });
    }

    /*
     * üéì ENDPOINT SUMMARIES - Demonstra√ß√£o de Proje√ß√£o DTO
     */
    
    // ‚úÖ BOA PR√ÅTICA: Endpoint espec√≠fico para casos de uso espec√≠ficos
    // /summaries retorna dados resumidos (mais eficiente)
    @GetMapping("/summaries")
    @Transactional(readOnly = true)
    public ResponseEntity<List<UserSummaryDto>> getUserSummaries() {
        String operationId = "getUserSummaries-good";

        return performanceMonitor.measure(operationId,
            "Buscar resumos de usu√°rios com proje√ß√£o JPQL",
            () -> {
                // ‚úÖ BOA PR√ÅTICA: Proje√ß√£o JPQL - M√ÅXIMA EFICI√äNCIA
                // Carrega APENAS os campos necess√°rios (n√£o entidades completas)
                // SELECT new UserSummaryDto(...) cria DTOs diretamente na query
                // Mais eficiente que carregar entidades e depois converter
                List<UserSummaryDto> summaries = userRepository.findAllUserSummaries();

                logger.info("‚úÖ {} resumos de usu√°rios carregados eficientemente", summaries.size());

                return ResponseEntity.ok(summaries);
            });
    }

    // BOM: Consulta otimizada por departamento
    @GetMapping("/department/{departmentName}")
    @Transactional(readOnly = true)
    public ResponseEntity<List<UserDto>> getUsersByDepartment(@PathVariable String departmentName) {
        String operationId = "getUsersByDepartment-good-" + departmentName;

        return performanceMonitor.measure(operationId,
            "Buscar usu√°rios por departamento com JOIN FETCH",
            () -> {
                // BOM: Usa consulta otimizada com JOIN FETCH
                List<User> users = userRepository.findByDepartmentNameOptimized(departmentName);
                List<UserDto> userDtos = userConverter.toDtoList(users);

                logger.info("‚úÖ {} usu√°rios encontrados no departamento '{}'", users.size(), departmentName);

                return ResponseEntity.ok(userDtos);
            });
    }

    // BOM: Busca por email com otimiza√ß√£o
    @GetMapping("/email/{email}")
    @Transactional(readOnly = true)
    public ResponseEntity<UserDto> getUserByEmail(@PathVariable String email) {
        String operationId = "getUserByEmail-good-" + email.hashCode();

        return performanceMonitor.measure(operationId,
            "Buscar usu√°rio por email com JOIN FETCH",
            () -> {
                // BOM: Usa consulta otimizada com JOIN FETCH
                Optional<User> user = userRepository.findByEmailWithDepartment(email);

                if (user.isPresent()) {
                    UserDto dto = userConverter.toDto(user.get());
                    logger.info("‚úÖ Usu√°rio encontrado por email: {}", dto.getName());
                    return ResponseEntity.ok(dto);
                } else {
                    logger.warn("‚ö†Ô∏è Usu√°rio n√£o encontrado com email: {}", email);
                    return ResponseEntity.notFound().build();
                }
            });
    }

    // BOM: Contagem eficiente
    @GetMapping("/department/{departmentId}/count")
    @Transactional(readOnly = true)
    public ResponseEntity<Long> getUserCountByDepartment(@PathVariable Long departmentId) {
        String operationId = "getUserCountByDepartment-good-" + departmentId;

        return performanceMonitor.measure(operationId,
            "Contar usu√°rios por departamento (consulta COUNT otimizada)",
            () -> {
                // BOM: Usa consulta COUNT espec√≠fica
                Long count = userRepository.countByDepartmentId(departmentId);

                logger.info("‚úÖ Departamento {} tem {} usu√°rios", departmentId, count);

                return ResponseEntity.ok(count);
            });
    }

    // ‚úÖ BOA PR√ÅTICA: Endpoint para monitoriza√ß√£o
    @GetMapping("/performance/summary")
    public ResponseEntity<String> getPerformanceSummary() {
        performanceMonitor.printSummary();
        return ResponseEntity.ok("Performance summary printed to logs");
    }
}

/*
 * üéì RESUMO DAS BOAS PR√ÅTICAS DEMONSTRADAS NESTE CONTROLLER:
 * 
 * üìã ESTRUTURA:
 * ‚úÖ @RestController para API REST
 * ‚úÖ @RequestMapping para prefixo comum
 * ‚úÖ Constructor injection para dependencies
 * ‚úÖ Final fields para imutabilidade
 * 
 * üîÑ TRANSA√á√ïES:
 * ‚úÖ @Transactional(readOnly = true) para consultas
 * ‚úÖ Otimiza√ß√£o: sem dirty checking
 * 
 * üîç CONSULTAS:
 * ‚úÖ EntityGraphs para resolver N+1 problems
 * ‚úÖ JOIN FETCH para rela√ß√µes necess√°rias
 * ‚úÖ Proje√ß√µes DTO para dados espec√≠ficos
 * ‚úÖ Consultas COUNT para contagens eficientes
 * 
 * üìä PAGINA√á√ÉO:
 * ‚úÖ Page<T> para grandes datasets
 * ‚úÖ @RequestParam com defaults sensatos
 * ‚úÖ PageRequest.of() com ordena√ß√£o
 * 
 * üîÑ CONVERS√ïES:
 * ‚úÖ DTOs para separar API da estrutura interna
 * ‚úÖ Converters para transforma√ß√µes Entity‚ÜîDTO
 * ‚úÖ Page.map() para manter metadados de pagina√ß√£o
 * 
 * üì° HTTP:
 * ‚úÖ ResponseEntity para controlo total da resposta
 * ‚úÖ HTTP status codes apropriados (200, 404)
 * ‚úÖ RESTful URLs (/users/{id}, /users/department/{name})
 * 
 * üìà MONITORIZA√á√ÉO:
 * ‚úÖ PerformanceMonitor para m√©tricas
 * ‚úÖ Logging estruturado para debugging
 * ‚úÖ IDs √∫nicos para tracking de opera√ß√µes
 * 
 * üÜö COMPARE COM UserBadController PARA VER AS DIFEREN√áAS!
 */