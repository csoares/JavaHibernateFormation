package com.formation.hibernate.controller.good;

import com.formation.hibernate.converter.OrderConverter;
import com.formation.hibernate.dto.OrderDto;
import com.formation.hibernate.dto.OrderSummaryDto;
import com.formation.hibernate.dto.UserSummaryDto;
import com.formation.hibernate.entity.Order;
import com.formation.hibernate.repository.OrderRepository;
import com.formation.hibernate.util.PerformanceMonitor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * üéì ORDER GOOD CONTROLLER - Demonstra√ß√£o de Excel√™ncia com BLOBS e Performance
 * 
 * Este controlador exemplifica as melhores pr√°ticas para entidades com BLOB:
 * ‚úÖ Transa√ß√µes read-only optimizadas para consultas
 * ‚úÖ EntityGraphs estrat√©gicos para resolver problemas N+1
 * ‚úÖ Consultas que EVITAM carregar BLOBs desnecessariamente
 * ‚úÖ Pagina√ß√£o obrigat√≥ria para escalabilidade com BLOBs
 * ‚úÖ Projec√ß√µes DTO para m√°xima efici√™ncia de dados
 * ‚úÖ Consultas agregadas SQL em vez de c√°lculos em mem√≥ria
 * ‚úÖ √çndices optimizados para consultas por data
 * ‚úÖ Monitoriza√ß√£o integrada de performance e m√©tricas
 * ‚úÖ Logging estruturado para observabilidade
 * ‚úÖ Controlo total de respostas HTTP com ResponseEntity
 * ‚úÖ Tratamento adequado de erros e casos excepcionais
 * ‚úÖ Separa√ß√£o clara entre dados essenciais e BLOBs pesados
 */

// ‚úÖ BOA PR√ÅTICA: @RestController combina @Controller + @ResponseBody
@RestController

// ‚úÖ BOA PR√ÅTICA: @RequestMapping no n√≠vel da classe para prefixo comum
@RequestMapping("/api/good/orders")
public class OrderGoodController {

    private static final Logger logger = LoggerFactory.getLogger(OrderGoodController.class);

    private final OrderRepository orderRepository;
    private final OrderConverter orderConverter;
    private final PerformanceMonitor performanceMonitor;

    public OrderGoodController(OrderRepository orderRepository, OrderConverter orderConverter, PerformanceMonitor performanceMonitor) {
        this.orderRepository = orderRepository;
        this.orderConverter = orderConverter;
        this.performanceMonitor = performanceMonitor;
    }

    /*
     * üéì ENDPOINT GET BY ID - Demonstra√ß√£o de Optimiza√ß√µes com BLOB
     */

    // ‚úÖ BOA PR√ÅTICA: @Transactional(readOnly = true) para consultas
    // VANTAGEM: Hibernate n√£o faz dirty checking (mais eficiente)
    // VANTAGEM: Base de dados pode optimizar consultas read-only
    @GetMapping("/{id}")
    @Transactional(readOnly = true)
    public ResponseEntity<OrderDto> getOrderById(@PathVariable Long id) {
        String operationId = "getOrderById-good-" + id;

        return performanceMonitor.measure(operationId,
            "Buscar pedido por ID com JOINs otimizados (User + Department em 1 query)",
            () -> {
                // ‚úÖ BOA PR√ÅTICA: Native query com JOINs expl√≠citos e SEM BLOB
                // VANTAGEM: Carrega Order + User + Department numa √∫nica query SQL
                // VANTAGEM: N√ÉO carrega o BLOB (invoicePdf) desnecessariamente
                // VANTAGEM: Retorna Object[] para evitar carregar entidade completa
                // RESULTADO: M√°xima efici√™ncia - 1 query em vez de 3 (N+1)
                // NOTE: Using native SQL returning Object[] to avoid BLOB loading
                //       This is necessary because Hibernate 6 ignores @Basic(fetch=LAZY) for byte[]
                Optional<Object[]> orderData = orderRepository.findOrderWithUserAndDepartmentNative(id);

                if (orderData.isPresent()) {
                    Object[] wrapper = orderData.get();
                    // NOTE: Spring Data JPA wraps native query results in Object[]
                    // So wrapper[0] contains the actual row data as Object[]
                    Object[] row = (Object[]) wrapper[0];

                    // Manual mapping from Object[] to OrderDto to avoid loading Order entity
                    // Columns: id, order_number, order_date, total_amount, status, user_id,
                    //          user_id2, user_name, user_email, user_created, dept_id, dept_name
                    // Note: PostgreSQL native queries return BigInteger for BIGINT columns
                    OrderDto dto = new OrderDto(
                        ((Number) row[0]).longValue(),                              // id
                        (String) row[1],                                            // order_number
                        ((java.sql.Timestamp) row[2]).toLocalDateTime(),            // order_date
                        (BigDecimal) row[3],                                        // total_amount
                        Order.OrderStatus.valueOf((String) row[4])                 // status
                    );

                    // ‚úÖ BOA PR√ÅTICA: Dados de User e Department v√™m na mesma query (JOINs)
                    // VANTAGEM: Sem N+1 problem - tudo numa √∫nica consulta SQL
                    // RESULTADO: Performance m√°xima com JOINs otimizados
                    String userName = (String) row[7];        // user_name
                    String userEmail = (String) row[8];       // user_email
                    java.sql.Timestamp userCreatedTs = (java.sql.Timestamp) row[9]; // user_created
                    LocalDateTime userCreated = userCreatedTs != null ? userCreatedTs.toLocalDateTime() : null;
                    String departmentName = (String) row[11]; // dept_name

                    dto.setUser(new UserSummaryDto(
                        ((Number) row[6]).longValue(),                              // user_id2
                        userName,
                        userEmail,
                        userCreated,
                        departmentName
                    ));

                    logger.info("‚úÖ Pedido encontrado com 1 query otimizada: {} (User: {}, Department: {})",
                        dto.getOrderNumber(), userName, departmentName != null ? departmentName : "N/A");
                    return ResponseEntity.ok(dto);
                } else {
                    logger.warn("‚ö†Ô∏è Pedido n√£o encontrado: {}", id);
                    return ResponseEntity.notFound().build();
                }
            });
    }

    /*
     * üéì ENDPOINT PAGINATED - Demonstra√ß√£o de Pagina√ß√£o com BLOBS
     */
    
    // ‚úÖ BOA PR√ÅTICA: Pagina√ß√£o obrigat√≥ria para entidades com BLOB
    // VANTAGEM: Evita carregar milhares de pedidos + PDFs de uma vez
    // VANTAGEM: Consulta directa por status (usa √≠ndice)
    // RESULTADO: Performance consistente independente do volume de dados
    @GetMapping
    @Transactional(readOnly = true)
    public ResponseEntity<Page<OrderDto>> getOrdersByStatus(
            @RequestParam Order.OrderStatus status,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size) {

        String operationId = "getOrdersByStatus-good-" + status + "-page-" + page;

        return performanceMonitor.measure(operationId,
            String.format("Buscar pedidos por status %s (p√°gina %d)", status, page),
            () -> {
                // ‚úÖ BOA PR√ÅTICA: Pagina√ß√£o com JOIN FETCH estrat√©gico
                // VANTAGEM: PageRequest limita resultados (evita OutOfMemoryError)
                // VANTAGEM: Sort optimiza ordem (usa √≠ndice em order_date)
                // VANTAGEM: findByStatusWithUser() evita N+1 mas N√ÉO carrega BLOBs
                Pageable pageable = PageRequest.of(page, size, Sort.by("orderDate").descending());
                Page<Order> orders = orderRepository.findByStatusWithUser(status, pageable);

                Page<OrderDto> orderDtos = orders.map(orderConverter::toDto);

                logger.info("‚úÖ P√°gina {} de pedidos {} carregada: {} elementos",
                    page, status, orderDtos.getNumberOfElements());

                return ResponseEntity.ok(orderDtos);
            });
    }

    /*
     * üéì ENDPOINT PROJECTION - Demonstra√ß√£o de M√°xima Efici√™ncia
     */
    
    // ‚úÖ BOA PR√ÅTICA: Projec√ß√£o DTO para dados resumidos
    // VANTAGEM: Carrega APENAS os campos necess√°rios (nunca BLOBs)
    // VANTAGEM: SELECT espec√≠fico em vez de entidades completas
    // RESULTADO: Performance m√°xima para listagens e resumos
    @GetMapping("/user/{userId}/summaries")
    @Transactional(readOnly = true)
    public ResponseEntity<List<OrderSummaryDto>> getOrderSummariesByUser(@PathVariable Long userId) {
        String operationId = "getOrderSummariesByUser-good-" + userId;

        return performanceMonitor.measure(operationId,
            "Buscar resumos de pedidos por usu√°rio com proje√ß√£o JPQL",
            () -> {
                // ‚úÖ BOA PR√ÅTICA: Projec√ß√£o JPQL - M√ÅXIMA EFICI√äNCIA
                // VANTAGEM: SELECT new OrderSummaryDto(...) cria DTOs directamente
                // VANTAGEM: N√ÉO carrega entidades nem BLOBs pesados
                // VANTAGEM: Transfer√™ncia m√≠nima de dados pela rede
                // RESULTADO: Performance √≥ptima para resumos
                List<OrderSummaryDto> summaries = orderRepository.findOrderSummariesByUserId(userId);

                logger.info("‚úÖ {} resumos de pedidos carregados para usu√°rio {}", summaries.size(), userId);

                return ResponseEntity.ok(summaries);
            });
    }

    /*
     * üéì ENDPOINT SEARCH - Demonstra√ß√£o de Consulta Optimizada
     */
    
    // ‚úÖ BOA PR√ÅTICA: Consulta por √≠ndice √∫nico sem carregar BLOB
    // VANTAGEM: WHERE orderNumber = ? usa √≠ndice (performance O(1))
    // VANTAGEM: JOIN FETCH carrega rela√ß√µes necess√°rias
    // IMPORTANTE: N√ÉO carrega invoicePdf at√© ser explicitamente pedido
    @GetMapping("/number/{orderNumber}")
    @Transactional(readOnly = true)
    public ResponseEntity<OrderDto> getOrderByNumber(@PathVariable String orderNumber) {
        String operationId = "getOrderByNumber-good-" + orderNumber.hashCode();

        return performanceMonitor.measure(operationId,
            "Buscar pedido por n√∫mero com JOIN FETCH m√∫ltiplo",
            () -> {
                // ‚úÖ BOA PR√ÅTICA: M√∫ltiplos JOIN FETCH estrat√©gicos
                // VANTAGEM: Uma √∫nica query para Order + User + Department
                // VANTAGEM: Usa √≠ndice √∫nico em orderNumber (instant√¢neo)
                // IMPORTANTE: M√©todo n√£o inclui BLOB no EntityGraph
                // RESULTADO: Dados completos sem carregar MB de PDF
                Optional<Order> order = orderRepository.findByOrderNumberWithDetails(orderNumber);

                if (order.isPresent()) {
                    OrderDto dto = orderConverter.toDto(order.get());
                    logger.info("‚úÖ Pedido encontrado por n√∫mero: {}", dto.getOrderNumber());
                    return ResponseEntity.ok(dto);
                } else {
                    logger.warn("‚ö†Ô∏è Pedido n√£o encontrado com n√∫mero: {}", orderNumber);
                    return ResponseEntity.notFound().build();
                }
            });
    }

    // BOM: Consulta agregada eficiente
    @GetMapping("/department/{departmentId}/total")
    @Transactional(readOnly = true)
    public ResponseEntity<BigDecimal> getTotalAmountByDepartment(
            @PathVariable Long departmentId,
            @RequestParam LocalDateTime startDate,
            @RequestParam LocalDateTime endDate) {

        String operationId = "getTotalAmountByDepartment-good-" + departmentId;

        return performanceMonitor.measure(operationId,
            "Calcular total por departamento com agrega√ß√£o SQL",
            () -> {
                // BOM: Usa agrega√ß√£o SQL para c√°lculo eficiente
                BigDecimal total = orderRepository.getTotalAmountByDepartmentAndDateRange(
                    departmentId, startDate, endDate);

                logger.info("‚úÖ Total calculado para departamento {}: {}",
                    departmentId, total != null ? total : BigDecimal.ZERO);

                return ResponseEntity.ok(total != null ? total : BigDecimal.ZERO);
            });
    }

    // BOM: Consulta sem carregar blobs desnecessariamente
    @GetMapping("/high-value")
    @Transactional(readOnly = true)
    public ResponseEntity<List<Object[]>> getHighValueOrdersWithoutBlobs(
            @RequestParam BigDecimal minAmount) {

        String operationId = "getHighValueOrdersWithoutBlobs-good";

        return performanceMonitor.measure(operationId,
            "Buscar pedidos de alto valor SEM carregar PDFs",
            () -> {
                // BOM: Consulta espec√≠fica sem carregar blobs
                List<Object[]> orders = orderRepository.findOrdersWithoutBlobData(minAmount);

                logger.info("‚úÖ {} pedidos de alto valor encontrados (sem carregar PDFs)",
                    orders.size());

                return ResponseEntity.ok(orders);
            });
    }

    // BOM: Consulta por intervalo de datas com √≠ndice
    @GetMapping("/date-range")
    @Transactional(readOnly = true)
    public ResponseEntity<List<OrderDto>> getOrdersByDateRange(
            @RequestParam LocalDateTime startDate,
            @RequestParam LocalDateTime endDate) {

        String operationId = "getOrdersByDateRange-good";

        return performanceMonitor.measure(operationId,
            "Buscar pedidos por intervalo de datas (√≠ndice otimizado)",
            () -> {
                // BOM: Usa √≠ndice na coluna order_date
                List<Order> orders = orderRepository.findOrdersByDateRange(startDate, endDate);
                List<OrderDto> orderDtos = orderConverter.toDtoList(orders);

                logger.info("‚úÖ {} pedidos encontrados entre {} e {}",
                    orders.size(), startDate, endDate);

                return ResponseEntity.ok(orderDtos);
            });
    }

    // BOM: Estat√≠sticas sem carregar entidades completas
    @GetMapping("/statistics")
    @Transactional(readOnly = true)
    public ResponseEntity<List<Object[]>> getOrderStatistics() {
        String operationId = "getOrderStatistics-good";

        return performanceMonitor.measure(operationId,
            "Gerar estat√≠sticas de pedidos com GROUP BY eficiente",
            () -> {
                // BOM: Usa GROUP BY para estat√≠sticas eficientes
                List<Object[]> statistics = orderRepository.getOrderStatistics();

                logger.info("‚úÖ Estat√≠sticas geradas para {} status diferentes", statistics.size());

                return ResponseEntity.ok(statistics);
            });
    }
}