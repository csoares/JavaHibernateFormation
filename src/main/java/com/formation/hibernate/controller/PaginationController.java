package com.formation.hibernate.controller;

import com.formation.hibernate.converter.UserConverter;
import com.formation.hibernate.dto.UserDto;
import com.formation.hibernate.entity.User;
import com.formation.hibernate.repository.UserRepository;
import com.formation.hibernate.util.PerformanceMonitor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import java.util.List;

/**
 * üéì PAGINATION CONTROLLER - Demonstra√ß√£o Focada de Pagina√ß√£o Eficiente
 * 
 * Este controlador demonstra APENAS t√©cnicas de pagina√ß√£o para facilitar o aprendizado:
 * 
 * üìö CONCEITOS FOCADOS:
 * ‚úÖ Page vs List: Quando usar cada abordagem
 * ‚úÖ Pageable: Configura√ß√£o flex√≠vel (page, size, sort)
 * ‚úÖ Sort: Ordena√ß√£o simples e m√∫ltipla
 * ‚úÖ Performance: Como evitar OutOfMemoryError
 * ‚úÖ UX: Metadados para navega√ß√£o (totalPages, hasNext, etc.)
 * ‚úÖ Valida√ß√£o: Limites seguros para par√¢metros
 * 
 * üîç COMPARA√á√ÉO SIMPLES:
 * - findAll() = PERIGO (carrega tudo)
 * - findAll(Pageable) = SEGURO (carrega p√°gina)
 * 
 * üéØ FOCO: Gest√£o inteligente de grandes volumes de dados
 */

@RestController
@RequestMapping("/api/pagination-demo")
public class PaginationController {

    private static final Logger logger = LoggerFactory.getLogger(PaginationController.class);

    private final UserRepository userRepository;
    private final UserConverter userConverter;
    private final PerformanceMonitor performanceMonitor;

    public PaginationController(UserRepository userRepository, UserConverter userConverter, PerformanceMonitor performanceMonitor) {
        this.userRepository = userRepository;
        this.userConverter = userConverter;
        this.performanceMonitor = performanceMonitor;
    }

    /*
     * üö® DEMONSTRA√á√ÉO DO PROBLEMA SEM PAGINA√á√ÉO
     */

    @GetMapping("/bad/all")
    @Transactional(readOnly = true)
    public ResponseEntity<List<UserDto>> getAllUsersWithoutPagination() {
        String operationId = "pagination-problem-all";

        return performanceMonitor.measure(operationId,
            "‚ùå Buscar TODOS os users SEM pagina√ß√£o (PERIGOSO!)",
            () -> {
                // ‚ùå PROBLEMA: Carrega TODOS os registos na mem√≥ria
                List<User> allUsers = userRepository.findAll();
                
                // ‚ùå PROBLEMA: Converte TODOS para DTO (mais mem√≥ria)
                List<UserDto> allUserDtos = userConverter.toDtoList(allUsers);
                
                logger.error("‚ùå PERIGO: Carregados {} users SEM pagina√ß√£o! Risco de OutOfMemoryError!",
                    allUsers.size());
                
                return ResponseEntity.ok(allUserDtos);
            });
    }

    /*
     * ‚úÖ SOLU√á√ÉO 1: PAGINA√á√ÉO B√ÅSICA
     */

    @GetMapping("/good")
    @Transactional(readOnly = true)
    public ResponseEntity<Page<UserDto>> getUsersPaginated(
            @RequestParam(defaultValue = "0") @Min(0) int page,
            @RequestParam(defaultValue = "20") @Min(1) @Max(100) int size) {

        String operationId = "pagination-basic-" + page + "-" + size;

        return performanceMonitor.measure(operationId,
            "‚úÖ Buscar users COM pagina√ß√£o b√°sica",
            () -> {
                // ‚úÖ SOLU√á√ÉO: Pageable limita resultados
                Pageable pageable = PageRequest.of(page, size);
                
                // ‚úÖ SOLU√á√ÉO: S√≥ carrega uma p√°gina de dados
                Page<User> userPage = userRepository.findAll(pageable);
                
                // ‚úÖ SOLU√á√ÉO: Page.map() preserva metadados de pagina√ß√£o
                Page<UserDto> userDtoPage = userPage.map(userConverter::toDto);
                
                logger.info("‚úÖ PAGINA√á√ÉO: P√°gina {} com {} users (de {} total)",
                    page, userDtoPage.getNumberOfElements(), userDtoPage.getTotalElements());
                
                return ResponseEntity.ok(userDtoPage);
            });
    }

    /*
     * ‚úÖ SOLU√á√ÉO 2: PAGINA√á√ÉO COM ORDENA√á√ÉO
     */

    @GetMapping("/good-with-sort")
    @Transactional(readOnly = true)
    public ResponseEntity<Page<UserDto>> getUsersPaginatedWithSort(
            @RequestParam(defaultValue = "0") @Min(0) int page,
            @RequestParam(defaultValue = "20") @Min(1) @Max(100) int size,
            @RequestParam(defaultValue = "name") String sortBy,
            @RequestParam(defaultValue = "asc") String sortDir) {

        String operationId = "pagination-sort-" + page + "-" + size + "-" + sortBy;

        return performanceMonitor.measure(operationId,
            "‚úÖ Buscar users COM pagina√ß√£o E ordena√ß√£o",
            () -> {
                // ‚úÖ SOLU√á√ÉO: Sort direccional (ASC/DESC)
                Sort.Direction direction = sortDir.equalsIgnoreCase("desc") ? 
                    Sort.Direction.DESC : Sort.Direction.ASC;
                Sort sort = Sort.by(direction, sortBy);
                
                // ‚úÖ SOLU√á√ÉO: Pageable com ordena√ß√£o
                Pageable pageable = PageRequest.of(page, size, sort);
                
                Page<User> userPage = userRepository.findAll(pageable);
                Page<UserDto> userDtoPage = userPage.map(userConverter::toDto);
                
                logger.info("‚úÖ PAGINA√á√ÉO + SORT: P√°gina {} ordenada por {} {} com {} users",
                    page, sortBy, sortDir.toUpperCase(), userDtoPage.getNumberOfElements());
                
                return ResponseEntity.ok(userDtoPage);
            });
    }

    /*
     * ‚úÖ SOLU√á√ÉO 3: PAGINA√á√ÉO COM FILTRO DE PESQUISA
     */

    @GetMapping("/search")
    @Transactional(readOnly = true)
    public ResponseEntity<Page<UserDto>> searchUsersPaginated(
            @RequestParam String name,
            @RequestParam(defaultValue = "0") @Min(0) int page,
            @RequestParam(defaultValue = "20") @Min(1) @Max(100) int size) {

        String operationId = "pagination-search-" + name + "-" + page;

        return performanceMonitor.measure(operationId,
            "‚úÖ Pesquisar users COM pagina√ß√£o (filtro + p√°gina)",
            () -> {
                // ‚úÖ SOLU√á√ÉO: Pagina√ß√£o + filtro numa √∫nica opera√ß√£o
                Pageable pageable = PageRequest.of(page, size, Sort.by("name"));
                
                // ‚úÖ SOLU√á√ÉO: Query Method com pagina√ß√£o autom√°tica
                Page<User> userPage = userRepository.findByNameContainingIgnoreCase(name, pageable);
                Page<UserDto> userDtoPage = userPage.map(userConverter::toDto);
                
                logger.info("‚úÖ PESQUISA PAGINADA: '{}' encontrou {} users na p√°gina {} (de {} total)",
                    name, userDtoPage.getNumberOfElements(), page, userDtoPage.getTotalElements());
                
                return ResponseEntity.ok(userDtoPage);
            });
    }

    /*
     * ‚úÖ SOLU√á√ÉO 4: PAGINA√á√ÉO + ENTITYGRAPH (Evita N+1)
     */

    @GetMapping("/optimized")
    @Transactional(readOnly = true)
    public ResponseEntity<Page<UserDto>> getUsersPaginatedOptimized(
            @RequestParam(defaultValue = "0") @Min(0) int page,
            @RequestParam(defaultValue = "20") @Min(1) @Max(100) int size) {

        String operationId = "pagination-optimized-" + page + "-" + size;

        return performanceMonitor.measure(operationId,
            "‚úÖ Buscar users COM pagina√ß√£o + EntityGraph (sem N+1)",
            () -> {
                // ‚úÖ SOLU√á√ÉO: Pagina√ß√£o + EntityGraph para evitar N+1
                Pageable pageable = PageRequest.of(page, size, Sort.by("name"));
                
                // ‚úÖ SOLU√á√ÉO: findAll() com EntityGraph carrega departments junto
                Page<User> userPage = userRepository.findAll(pageable);
                Page<UserDto> userDtoPage = userPage.map(userConverter::toDto);
                
                logger.info("‚úÖ PAGINA√á√ÉO OPTIMIZADA: P√°gina {} com {} users e departments carregados",
                    page, userDtoPage.getNumberOfElements());
                
                return ResponseEntity.ok(userDtoPage);
            });
    }

    /*
     * üìä DEMONSTRA√á√ÉO DE METADADOS DE PAGINA√á√ÉO
     */

    @GetMapping("/metadata/{page}")
    @Transactional(readOnly = true)
    public ResponseEntity<String> showPaginationMetadata(@PathVariable int page) {
        String operationId = "pagination-metadata-" + page;

        return performanceMonitor.measure(operationId,
            "üìä Demonstrar metadados de pagina√ß√£o",
            () -> {
                Pageable pageable = PageRequest.of(page, 10);
                Page<User> userPage = userRepository.findAll(pageable);
                
                StringBuilder metadata = new StringBuilder();
                metadata.append("üìÑ METADADOS DA P√ÅGINA:\n");
                metadata.append(String.format("- P√°gina actual: %d\n", userPage.getNumber()));
                metadata.append(String.format("- Tamanho da p√°gina: %d\n", userPage.getSize()));
                metadata.append(String.format("- Elementos nesta p√°gina: %d\n", userPage.getNumberOfElements()));
                metadata.append(String.format("- Total de elementos: %d\n", userPage.getTotalElements()));
                metadata.append(String.format("- Total de p√°ginas: %d\n", userPage.getTotalPages()));
                metadata.append(String.format("- √â primeira p√°gina? %s\n", userPage.isFirst()));
                metadata.append(String.format("- √â √∫ltima p√°gina? %s\n", userPage.isLast()));
                metadata.append(String.format("- Tem pr√≥xima? %s\n", userPage.hasNext()));
                metadata.append(String.format("- Tem anterior? %s\n", userPage.hasPrevious()));
                
                logger.info("üìä Metadados da p√°gina {} exibidos", page);
                
                return ResponseEntity.ok(metadata.toString());
            });
    }

    /*
     * üîß ENDPOINT PARA TESTAR LIMITES
     */

    @GetMapping("/stress-test")
    @Transactional(readOnly = true)
    public ResponseEntity<String> stressTestPagination() {
        String operationId = "pagination-stress-test";

        return performanceMonitor.measure(operationId,
            "üîß Teste de stress: m√∫ltiplas p√°ginas sequenciais",
            () -> {
                StringBuilder result = new StringBuilder("üîß TESTE DE STRESS:\n");
                
                // Testa 10 p√°ginas sequenciais para medir consist√™ncia
                for (int i = 0; i < 10; i++) {
                    long startTime = System.currentTimeMillis();
                    
                    Pageable pageable = PageRequest.of(i, 50);
                    Page<User> page = userRepository.findAll(pageable);
                    
                    long endTime = System.currentTimeMillis();
                    long duration = endTime - startTime;
                    
                    result.append(String.format("P√°gina %d: %dms (%d users)\n",
                        i, duration, page.getNumberOfElements()));
                }
                
                logger.info("üîß Teste de stress de pagina√ß√£o conclu√≠do");
                
                return ResponseEntity.ok(result.toString());
            });
    }

    /*
     * üìà ENDPOINT PARA COMPARAR PERFORMANCE
     */

    @GetMapping("/performance-summary")
    public ResponseEntity<String> getPerformanceSummary() {
        performanceMonitor.printSummary();
        return ResponseEntity.ok(
            "üìä Performance summary printed to logs.\n\n" +
            "üîç Compare os tempos de execu√ß√£o:\n" +
            "‚ùå /bad/all: Alto tempo e mem√≥ria\n" +
            "‚úÖ /good: Tempo consistente e baixa mem√≥ria\n\n" +
            "üìã Test endpoints:\n" +
            "- GET /api/pagination-demo/bad/all (PERIGO!)\n" +
            "- GET /api/pagination-demo/good?page=0&size=20\n" +
            "- GET /api/pagination-demo/good-with-sort?page=0&size=10&sortBy=email&sortDir=desc\n" +
            "- GET /api/pagination-demo/search?name=Jo√£o&page=0&size=5\n" +
            "- GET /api/pagination-demo/optimized?page=2&size=15\n" +
            "- GET /api/pagination-demo/metadata/0\n" +
            "- GET /api/pagination-demo/stress-test"
        );
    }
}